name: Deploy App to EC2 (Development)

on:
  push:
    branches: [ "Develop" ]

env:
  DOCKER_USERNAME: jefee
  DOCKER_FRONTEND_REPO: jefee/yanotela-frontend-dev
  DOCKER_BACKEND_REPO: jefee/yanotela-backend-dev
  EC2_HOST: 13.39.48.72
  EC2_USER: ubuntu
  DEPLOY_PATH: /var/www/yanotela

permissions:
  contents: read

jobs:
  build-and-deploy:
    name: Build and Deploy to Development
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend image (dev)
        uses: docker/build-push-action@v5
        with:
          context: ./Client
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.DOCKER_FRONTEND_REPO }}:develop
            ${{ env.DOCKER_FRONTEND_REPO }}:develop-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push backend image (dev)
        uses: docker/build-push-action@v5
        with:
          context: ./Server
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.DOCKER_BACKEND_REPO }}:develop
            ${{ env.DOCKER_BACKEND_REPO }}:develop-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: false

      - name: Deploy to Development EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            echo "🚀 Starting deployment to DEVELOPMENT environment"
            echo "✅ SSH connection successful!"
            whoami
            pwd
            
            # Create deployment directory if it doesn't exist
            sudo mkdir -p ${{ env.DEPLOY_PATH }}
            cd ${{ env.DEPLOY_PATH }}
            
            # Check if Docker is installed, install if missing
            if ! command -v docker &> /dev/null; then
              echo "📦 Installing Docker..."
              sudo apt-get update -qq
              sudo apt-get install -y ca-certificates curl
              sudo install -m 0755 -d /etc/apt/keyrings
              sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
              sudo chmod a+r /etc/apt/keyrings/docker.asc
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update -qq
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo usermod -aG docker $USER
              echo "✅ Docker installed successfully"
            else
              echo "✅ Docker is already installed"
            fi
            
            # Clone or update repository
            if [ ! -d ".git" ]; then
              echo "📁 Cloning development repository..."
              sudo rm -rf ./* ./.* 2>/dev/null || true
              git clone -b Develop https://github.com/FlorianMMI/Yanotela.git .
              echo "✅ Repository cloned"
            else
              echo "📁 Updating repository..."
              git fetch origin
              git reset --hard origin/Develop
              echo "✅ Repository updated"
            fi
            
            # Ensure docker-compose.dev.yml exists
            if [ ! -f "docker-compose.dev.yml" ]; then
              echo "❌ docker-compose.dev.yml not found in repository"
              ls -la
              exit 1
            fi
            
            # Update package cache
            sudo apt-get update -qq
            
            # Pull latest development images
            sudo docker compose -f docker-compose.dev.yml pull || echo "⚠️ Docker compose file not found, will create basic setup"
            
            # Create development environment file if it doesn't exist
            if [ ! -f .env.dev ]; then
              echo "📝 Creating development environment file..."
              cat > .env.dev << 'EOF'
            # Development Environment Configuration
            DATABASE_URL="postgresql://yanotela_dev:dev_password_123@localhost:5432/yanotela_dev"
            NODE_ENV=development
            PORT=3001
            SESSION_SECRET="dev_session_secret_change_this"
            
            # Database
            POSTGRES_DB=yanotela_dev
            POSTGRES_USER=yanotela_dev
            POSTGRES_PASSWORD=dev_password_123
            
            # Application URLs
            CLIENT_URL=http://${{ env.EC2_HOST }}:3000
            SERVER_URL=http://${{ env.EC2_HOST }}:3001
            
            # Development settings
            DEBUG=true
            LOG_LEVEL=debug
            EOF
              echo "✅ Development environment file created"
            fi
            
            # Load environment variables
            set -a
            source .env.dev
            set +a
            echo "✅ Development environment variables loaded"
            
            # Recreate containers with new images (using develop tag)
            sudo -E DOCKER_USERNAME=${{ env.DOCKER_USERNAME }} IMAGE_TAG=develop docker compose -f docker-compose.dev.yml up -d --force-recreate
            
            # Wait for services to be healthy
            echo "Waiting for services to start..."
            sleep 30
            
            # Check if services are running
            if sudo docker compose -f docker-compose.dev.yml ps | grep -q "Up"; then
              echo "✅ Development deployment successful!"
              
              # Test frontend
              if curl -f -s -m 10 http://localhost:3000 > /dev/null; then
                echo "✅ Frontend is responding on development server"
              else
                echo "❌ Frontend is not responding"
                sudo docker compose -f docker-compose.dev.yml logs yanotela-frontend-dev
                exit 1
              fi
              
              # Test backend
              if curl -f -s -m 10 http://localhost:3001 > /dev/null; then
                echo "✅ Backend is responding on development server"
              else
                echo "❌ Backend is not responding"
                sudo docker compose -f docker-compose.dev.yml logs yanotela-backend-dev
                exit 1
              fi
              
              echo "🎉 All services are healthy on DEVELOPMENT environment!"
              echo "🌐 Access your development app at:"
              echo "   Frontend: http://${{ env.EC2_HOST }}:3000"
              echo "   Backend:  http://${{ env.EC2_HOST }}:3001"
            else
              echo "❌ Services failed to start on development server"
              sudo docker compose -f docker-compose.dev.yml logs
              exit 1
            fi
