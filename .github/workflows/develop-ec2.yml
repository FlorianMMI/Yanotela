name: Deploy App to EC2 (Development)
on:
  push:
    branches: [ "preprod" ]

env:
  DOCKER_USERNAME: jefee
  DOCKER_FRONTEND_REPO: jefee/yanotela-frontend-dev
  DOCKER_BACKEND_REPO: jefee/yanotela-backend-dev
  EC2_HOST: yanotela.fr
  EC2_USER: ubuntu
  DEPLOY_PATH: /var/www/yanotela
permissions:
  contents: write
jobs:

  cleanup:
    uses : ./.github/workflows/cleanup-console-logs.yml
    permissions:
      contents: write

  build-and-deploy:
    name: Build and Deploy to Development
    runs-on: ubuntu-latest
    environment: development
    needs: cleanup
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: preprod

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            Server/package-lock.json
            Client/package-lock.json

      - name: Audit npm
        run: |
          cd Server
          npm ci --no-audit --progress=false
          npm audit --audit-level=high || true
          cd ../Client
          npm ci --no-audit --progress=false
          npm audit --audit-level=high || true
          cd ..

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend image (dev)
        uses: docker/build-push-action@v5
        with:
          context: ./Client
          platforms: linux/amd64
          push: true
          build-args: |
            NEXT_PUBLIC_API_URL=https://preprod.yanotela.fr/api
          tags: |
            ${{ env.DOCKER_FRONTEND_REPO }}:develop
            ${{ env.DOCKER_FRONTEND_REPO }}:develop-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push backend image (dev)
        uses: docker/build-push-action@v5
        with:
          context: ./Server
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.DOCKER_BACKEND_REPO }}:develop
            ${{ env.DOCKER_BACKEND_REPO }}:develop-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Development EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            echo "🚀 Starting deployment to DEVELOPMENT environment"
            cd ${{ env.DEPLOY_PATH }}

            # Check available disk space
            echo "📊 Initial disk space:"
            df -h

            # Aggressive cleanup to free up space
            echo "🧹 Cleaning up disk space..."
            
            # Clean Docker system (remove all unused containers, networks, images, cache)
            docker system prune -a -f --volumes || true
            
            # Remove all stopped containers
            docker container prune -f || true
            
            # Remove all unused images
            docker image prune -a -f || true
            
            # Remove all unused volumes
            docker volume prune -f || true
            
            # Remove all unused networks
            docker network prune -f || true
            
            # Clean package cache
            sudo apt-get clean || true
            sudo apt-get autoremove -y || true
            
            # Remove old logs
            sudo journalctl --vacuum-time=3d || true
            
            # Clear temporary files
            sudo rm -rf /tmp/* || true
            sudo rm -rf /var/tmp/* || true
            
            # Remove old kernels (keep current and one backup)
            sudo apt-get autoremove --purge -y || true

            echo "📊 Disk space after cleanup:"
            df -h

            # Clone ou mise à jour du dépôt
            if [ ! -d ".git" ]; then
              git clone -b Develop https://github.com/FlorianMMI/Yanotela.git .
            else
              git fetch origin
              git reset --hard origin/Develop
            fi

            # Créer le dossier pour la configuration Nginx
            mkdir -p ./nginx/conf.d

            # Créer le fichier de configuration Nginx (directement dans le script pour éviter les problèmes de chemin)
            cat > ./nginx/conf.d/default.conf << 'EOF'
            server {
                listen 80;
                server_name preprod.yanotela.fr www.preprod.yanotela.fr;

                location ^~ /.well-known/acme-challenge/ {
                    root /var/www/yanotela;
                    try_files $uri =404;
                }

                location / {
                    return 301 https://$server_name$request_uri;
                }
            }

            server {
                listen 443 ssl http2;
                server_name preprod.yanotela.fr www.preprod.yanotela.fr;

                client_max_body_size 10M;


                ssl_certificate /etc/letsencrypt/live/yanotela.fr/fullchain.pem;
                ssl_certificate_key /etc/letsencrypt/live/yanotela.fr/privkey.pem;

                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_ciphers HIGH:!aNULL:!MD5;
                ssl_prefer_server_ciphers on;



                location / {
                    proxy_pass http://frontend-dev:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
              }

                location /api/ {
                    rewrite ^/api/(.*) /$1 break;

                    proxy_pass http://backend-dev:3001;
                    proxy_http_version 1.1;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;

                    proxy_read_timeout 300s;
                    proxy_connect_timeout 75s;
                }

                location /socket.io/ {
                    proxy_pass http://backend-dev:3001/socket.io/;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;

                    proxy_read_timeout 86400;
                }

                location /health {
                    proxy_pass http://backend-dev:3001/health;
                    proxy_set_header Host $host;
                }
            }
            EOF

            # Créer le fichier docker-compose.yml (version complète)
            cat > docker-compose.yml << 'EOF'
            version: '3.8'
            services:
              db-dev:
                image: postgres:15-alpine
                container_name: yanotela-db-dev
                environment:
                  POSTGRES_USER: yanotela_dev
                  POSTGRES_PASSWORD: dev_password_123
                  POSTGRES_DB: yanotela_dev
                volumes:
                  - postgres_dev_data:/var/lib/postgresql/data
                networks:
                  - yanotela-dev
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U yanotela_dev -d yanotela_dev"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                restart: unless-stopped

              redis-dev:
                image: redis:7-alpine
                container_name: yanotela-redis-dev
                command: redis-server --requirepass redis_dev_password_123
                volumes:
                  - redis_dev_data:/data
                networks:
                  - yanotela-dev
                healthcheck:
                  test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                restart: unless-stopped

              backend-dev:
                image: ${{ env.DOCKER_BACKEND_REPO }}:develop
                container_name: yanotela-backend-dev
                env_file:
                  - .env.dev
                depends_on:
                  db-dev:
                    condition: service_healthy
                  redis-dev:
                    condition: service_healthy
                networks:
                  - yanotela-dev
                restart: unless-stopped
                command: sh -c "npx prisma migrate deploy && npm start"

              frontend-dev:
                image: ${{ env.DOCKER_FRONTEND_REPO }}:develop
                container_name: yanotela-frontend-dev
                environment:
                  - NODE_ENV=development
                  - NEXT_PUBLIC_API_URL=https://preprod.yanotela.fr/api
                env_file:
                  - .env.dev
                depends_on:
                  - backend-dev
                networks:
                  - yanotela-dev
                restart: unless-stopped

              nginx:
                image: nginx:latest
                container_name: yanotela-nginx-dev
                ports:
                  - "80:80"
                  - "443:443"
                volumes:
                  - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
                  - /etc/letsencrypt:/etc/letsencrypt
                depends_on:
                  - frontend-dev
                  - backend-dev
                networks:
                  - yanotela-dev
                restart: unless-stopped
                logging:
                  driver: "json-file"
                  options:
                    max-size: "10m"
                    max-file: "3"

            volumes:
              postgres_dev_data:
                driver: local
              redis_dev_data:
                driver: local

            networks:
              yanotela-dev:
                driver: bridge
            EOF

            # Créer le fichier .env.dev
            cat > .env.dev << 'EOF'
            ${{secrets.PREPROD}}
            EOF

            # Démarrer les services
            docker compose down || true
            docker compose pull
            docker compose up -d --force-recreate

            # Vérifier que les services sont démarrés
            sleep 30
            if docker compose ps | grep -q "Up"; then
              echo "✅ Services démarrés avec succès"
              echo "🎉 Déploiement terminé !"
              echo "🌐 Accédez à votre application : https://preprod.yanotela.fr"
            else
              echo "❌ Échec du démarrage des services"
              docker compose logs
              exit 1
            fi
