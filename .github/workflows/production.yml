name: 🚀 Production Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'

env:
  REGISTRY: docker.io
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # ===== TESTS =====
  test-backend:
    name: 🧪 Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: Server/package-lock.json

    - name: 📦 Install Backend Dependencies
      run: |
        cd Server
        npm ci

    - name: 🗄️ Setup Test Database
      run: |
        cd Server
        cp .env.example .env.test || echo "DATABASE_URL=postgresql://test_user:test_pass@localhost:5432/test_db" > .env.test
        echo "NODE_ENV=test" >> .env.test
        npx prisma generate
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db

    - name: 🧪 Run Backend Tests
      run: |
        cd Server
        npm run test:ci || npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db

  test-frontend:
    name: 🧪 Test Frontend
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: Client/package-lock.json

    - name: 📦 Install Frontend Dependencies
      run: |
        cd Client
        npm ci

    - name: 🔍 TypeScript Check
      run: |
        cd Client
        npm run type-check || npx tsc --noEmit

    - name: 🏗️ Build Frontend
      run: |
        cd Client
        npm run build

    - name: 🧪 Run Frontend Tests (if available)
      run: |
        cd Client
        npm run test || echo "No frontend tests configured"
      continue-on-error: true

  # ===== BUILD DOCKER IMAGES =====
  build-and-push:
    name: 🐳 Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: success() || github.event.inputs.force_deploy == 'true'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      if: env.USE_DOCKER_HUB == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 🔑 Configure AWS credentials
      if: env.USE_AWS_ECR == 'true'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION || 'eu-west-3' }}

    - name: 🔑 Login to Amazon ECR
      if: env.USE_AWS_ECR == 'true'
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          yanotela/frontend
          yanotela/backend
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=prod

    - name: 🏗️ Build and Push Frontend Image
      uses: docker/build-push-action@v5
      with:
        context: ./Client
        file: ./Client/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          yanotela/frontend:prod
          yanotela/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🏗️ Build and Push Backend Image
      uses: docker/build-push-action@v5
      with:
        context: ./Server
        file: ./Server/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          yanotela/backend:prod
          yanotela/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===== DEPLOYMENT =====
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-push]
    environment: production

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📋 Prepare deployment files
      run: |
        # Copy necessary files for deployment
        mkdir -p deployment
        cp docker-compose.prod.yml deployment/
        cp .env.prod deployment/
        cp -r deploy/ deployment/

    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    - name: 📤 Copy files to EC2
      run: |
        # Copy deployment files to EC2
        scp -o StrictHostKeyChecking=no -r deployment/ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/var/www/Yanotela/
        
        # Copy environment file
        echo "${{ secrets.ENV_PROD_FILE }}" | ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'cat > /var/www/Yanotela/.env.prod'

    - name: 🚀 Deploy on EC2
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          cd /var/www/Yanotela
          
          # Create backup of current deployment
          if [ -d "backup" ]; then rm -rf backup; fi
          if [ -f "docker-compose.prod.yml" ]; then
            mkdir -p backup
            docker-compose -f docker-compose.prod.yml ps > backup/services_status.txt
            cp .env.prod backup/ 2>/dev/null || true
          fi
          
          # Pull latest images
          docker-compose -f docker-compose.prod.yml pull
          
          # Stop current services
          docker-compose -f docker-compose.prod.yml down
          
          # Start new services
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be ready
          sleep 30
          
          # Health check
          if ! docker-compose -f docker-compose.prod.yml ps | grep "Up"; then
            echo "❌ Deployment failed - services not running"
            echo "🔄 Rolling back..."
            docker-compose -f docker-compose.prod.yml down
            if [ -f "backup/services_status.txt" ]; then
              cp backup/.env.prod .env.prod 2>/dev/null || true
              docker-compose -f docker-compose.prod.yml up -d
            fi
            exit 1
          fi
          
          # Clean up old images
          docker image prune -f
          
          echo "✅ Production deployment successful!"
        EOF

    - name: 🏥 Health Check
      run: |
        # Wait a bit more for services to stabilize
        sleep 10
        
        # Check if services are responding
        if curl -f -s http://${{ secrets.EC2_HOST }}:80 > /dev/null; then
          echo "✅ Frontend is responding"
        else
          echo "❌ Frontend health check failed"
          exit 1
        fi
        
        if curl -f -s http://${{ secrets.EC2_HOST }}:3001/health > /dev/null; then
          echo "✅ Backend is responding"
        else
          echo "❌ Backend health check failed"
          exit 1
        fi

  # ===== NOTIFICATIONS =====
  notify:
    name: 📧 Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()

    steps:
    - name: 📧 Send Success Email
      if: needs.deploy-production.result == 'success'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.NOTIFICATION_EMAIL }}
        password: ${{ secrets.NOTIFICATION_EMAIL_PASSWORD }}
        subject: "✅ Yanotela Production Deployment Successful"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: GitHub Actions <noreply@github.com>
        body: |
          🎉 Production deployment completed successfully!
          
          📋 Deployment Details:
          • Repository: ${{ github.repository }}
          • Branch: ${{ github.ref_name }}
          • Commit: ${{ github.sha }}
          • Actor: ${{ github.actor }}
          • Workflow: ${{ github.workflow }}
          
          🔗 Links:
          • Frontend: http://${{ secrets.EC2_HOST }}
          • Backend API: http://${{ secrets.EC2_HOST }}:3001
          • GitHub Action: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          ⏰ Deployment completed at: $(date)

    - name: 📧 Send Failure Email
      if: needs.deploy-production.result == 'failure'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.NOTIFICATION_EMAIL }}
        password: ${{ secrets.NOTIFICATION_EMAIL_PASSWORD }}
        subject: "🚨 Yanotela Production Deployment FAILED"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: GitHub Actions <noreply@github.com>
        body: |
          🚨 Production deployment has FAILED!
          
          📋 Deployment Details:
          • Repository: ${{ github.repository }}
          • Branch: ${{ github.ref_name }}
          • Commit: ${{ github.sha }}
          • Actor: ${{ github.actor }}
          • Workflow: ${{ github.workflow }}
          
          🔍 Check the logs:
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          ⚠️ Action Required: Please check the deployment logs and fix any issues.
          
          ⏰ Failure detected at: $(date)
