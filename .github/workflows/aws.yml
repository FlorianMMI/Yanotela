name: 🚀 Deploy App to EC2 Production

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'

env:
  DOCKER_USERNAME: jefee
  DOCKER_FRONTEND_REPO: jefee/yanotela-frontend
  DOCKER_BACKEND_REPO: jefee/yanotela-backend
  EC2_HOST: 13.36.209.205
  EC2_USER: ubuntu
  DEPLOY_PATH: /var/www/yanotela
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

permissions:
  contents: read

jobs:
  # ===== TESTS =====
  test-backend:
    name: 🧪 Test Backend
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: Server/package-lock.json

    - name: 📦 Install Backend Dependencies
      run: |
        cd Server
        npm ci

    - name: 🗄️ Setup Test Database
      run: |
        cd Server
        cp .env.example .env.test || echo "DATABASE_URL=postgresql://test_user:test_pass@localhost:5432/test_db" > .env.test
        echo "NODE_ENV=test" >> .env.test
        npx prisma generate
        npx prisma migrate deploy
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db

    - name: 🧪 Run Backend Tests
      run: |
        cd Server
        npm run test:ci || npm test
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db

  test-frontend:
    name: 🧪 Test Frontend
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: Client/package-lock.json

    - name: 📦 Install Frontend Dependencies
      run: |
        cd Client
        npm ci

    - name: 🔍 TypeScript Check
      run: |
        cd Client
        npm run type-check || npx tsc --noEmit

    - name: 🏗️ Build Frontend
      run: |
        cd Client
        npm run build

    - name: 🧪 Run Frontend Tests (if available)
      run: |
        cd Client
        npm run test || echo "No frontend tests configured"
      continue-on-error: true

  # ===== BUILD AND DEPLOY =====
  build-and-deploy:
    name: 🐳 Build and Deploy
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: success() || github.event.inputs.force_deploy == 'true'
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./Client
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.DOCKER_FRONTEND_REPO }}:latest
            ${{ env.DOCKER_FRONTEND_REPO }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./Server
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.DOCKER_BACKEND_REPO }}:latest
            ${{ env.DOCKER_BACKEND_REPO }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        continue-on-error: false

      - name: 🔐 Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: 🚀 Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
            echo "✅ SSH connection successful!"
            whoami
            pwd
            
            cd ${{ env.DEPLOY_PATH }}
            
            # Create backup of current deployment
            echo "📦 Creating backup..."
            if [ -d "backup" ]; then rm -rf backup; fi
            if [ -f "docker-compose.prod.yml" ]; then
              mkdir -p backup
              sudo docker compose -f docker-compose.prod.yml ps > backup/services_status.txt 2>/dev/null || true
              cp .env.prod backup/ 2>/dev/null || true
            fi
            
            # Update package cache (Ubuntu-specific)
            sudo apt-get update -qq
            
            # Pull latest images
            echo "📥 Pulling latest images..."
            sudo docker compose -f docker-compose.prod.yml pull
            
            # Stop current services
            echo "🛑 Stopping current services..."
            sudo docker compose -f docker-compose.prod.yml down
            
            # Load environment variables and start new services
            echo "🚀 Starting new services..."
            set -a
            source .env.prod
            set +a
            
            sudo -E DOCKER_USERNAME=${{ env.DOCKER_USERNAME }} IMAGE_TAG=latest docker compose -f docker-compose.prod.yml up -d
            
            # Wait for services to be ready
            echo "⏳ Waiting for services to be ready..."
            sleep 30
            
            # Health check
            if ! sudo docker compose -f docker-compose.prod.yml ps | grep -q "Up"; then
              echo "❌ Deployment failed - services not running"
              echo "🔄 Rolling back..."
              sudo docker compose -f docker-compose.prod.yml down
              if [ -f "backup/services_status.txt" ]; then
                cp backup/.env.prod .env.prod 2>/dev/null || true
                sudo docker compose -f docker-compose.prod.yml up -d
              fi
              exit 1
            fi
            
            # Test services
            echo "🏥 Testing services..."
            
            # Test frontend
            if curl -f -s -m 10 http://localhost:3000 > /dev/null; then
              echo "✅ Frontend is responding"
            else
              echo "❌ Frontend is not responding"
              sudo docker compose -f docker-compose.prod.yml logs yanotela-frontend-prod
              exit 1
            fi
            
            # Test backend
            if curl -f -s -m 10 http://localhost:3001/health > /dev/null; then
              echo "✅ Backend is responding"
            else
              echo "❌ Backend is not responding"
              sudo docker compose -f docker-compose.prod.yml logs yanotela-backend-prod
              exit 1
            fi
            
            # Clean up old images
            sudo docker image prune -f
            
            echo "🎉 Deployment completed successfully!"
          EOF

  # ===== NOTIFICATIONS =====
  notify:
    name: 📧 Send Notifications
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()

    steps:
    - name: 📧 Send Success Email
      if: needs.build-and-deploy.result == 'success'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.NOTIFICATION_EMAIL }}
        password: ${{ secrets.NOTIFICATION_EMAIL_PASSWORD }}
        subject: "✅ Yanotela Production Deployment Successful"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: GitHub Actions <noreply@github.com>
        body: |
          🎉 Production deployment completed successfully!

          📋 Deployment Details:
          • Repository: ${{ github.repository }}
          • Branch: ${{ github.ref_name }}
          • Commit: ${{ github.sha }}
          • Actor: ${{ github.actor }}
          • Workflow: ${{ github.workflow }}

          🔗 Links:
          • Frontend: http://${{ env.EC2_HOST }}:3000
          • Backend API: http://${{ env.EC2_HOST }}:3001
          • GitHub Action: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          ⏰ Deployment completed at: $(date)

    - name: 📧 Send Failure Email
      if: needs.build-and-deploy.result == 'failure'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.NOTIFICATION_EMAIL }}
        password: ${{ secrets.NOTIFICATION_EMAIL_PASSWORD }}
        subject: "🚨 Yanotela Production Deployment FAILED"
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: GitHub Actions <noreply@github.com>
        body: |
          🚨 Production deployment has FAILED!

          📋 Deployment Details:
          • Repository: ${{ github.repository }}
          • Branch: ${{ github.ref_name }}
          • Commit: ${{ github.sha }}
          • Actor: ${{ github.actor }}
          • Workflow: ${{ github.workflow }}

          🔍 Check the logs:
          ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

          ⚠️ Action Required: Please check the deployment logs and fix any issues.

          ⏰ Failure detected at: $(date)
