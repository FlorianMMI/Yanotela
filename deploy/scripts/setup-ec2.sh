#!/bin/bash
# Development EC2 Setup Script for Yanotela

set -e

echo "üöÄ Development EC2 Setup for Yanotela"
echo "====================================="

# V√©rification des pr√©requis
check_requirements() {
    echo "üîç V√©rification des pr√©requis..."
    
    # V√©rifier si on est sur EC2/Linux
    if [[ "$OSTYPE" != "linux-gnu"* ]]; then
        echo "‚ö†Ô∏è Ce script est con√ßu pour Linux (EC2). Continuer quand m√™me? (y/N)"
        read -r response
        if [[ ! "$response" =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    # V√©rifier les commandes n√©cessaires
    local missing_commands=()
    
    if ! command -v curl >/dev/null 2>&1; then
        missing_commands+=("curl")
    fi
    
    if ! command -v git >/dev/null 2>&1; then
        missing_commands+=("git")
    fi
    
    if [ ${#missing_commands[@]} -ne 0 ]; then
        echo "üì¶ Installation des outils manquants: ${missing_commands[*]}"
        sudo apt update
        sudo apt install -y "${missing_commands[@]}"
    fi
    
    echo "‚úÖ Pr√©requis v√©rifi√©s"
}

# Installation de Docker
install_docker() {
    echo "üê≥ Installation de Docker..."
    
    if command -v docker >/dev/null 2>&1; then
        echo "‚úÖ Docker d√©j√† install√© ($(docker --version))"
    else
        # Installation Docker
        sudo apt update
        sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
        
        # Ajouter la cl√© GPG Docker
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        
        # Ajouter le repository Docker
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        
        # Installer Docker
        sudo apt update
        sudo apt install -y docker-ce docker-ce-cli containerd.io
        
        echo "‚úÖ Docker install√©"
    fi
    
    # Installation Docker Compose
    if command -v docker-compose >/dev/null 2>&1; then
        echo "‚úÖ Docker Compose d√©j√† install√© ($(docker-compose --version))"
    else
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        echo "‚úÖ Docker Compose install√©"
    fi
    
    # Ajouter l'utilisateur au groupe docker
    if groups $USER | grep -q '\bdocker\b'; then
        echo "‚úÖ Utilisateur d√©j√† dans le groupe docker"
    else
        sudo usermod -aG docker $USER
        echo "‚úÖ Utilisateur ajout√© au groupe docker"
        echo "‚ö†Ô∏è Vous devez vous d√©connecter et reconnecter pour appliquer les changements"
    fi
}

# Setup development directories
setup_directories() {
    echo "üìÅ Setting up development directories..."
    
    # Development environment directory
    mkdir -p ~/yanotela-dev
    
    # Development backups and logs
    mkdir -p ~/yanotela-dev/backups ~/logs/yanotela-dev
    
    echo "‚úÖ Development directories created"
}

# Configuration du firewall (optionnel)
setup_firewall() {
    echo "üî• Configuration du firewall (UFW)..."
    
    if command -v ufw >/dev/null 2>&1; then
        # Permettre SSH
        sudo ufw allow 22/tcp
        
        # Allow development application ports
        sudo ufw allow 3000/tcp    # Dev frontend
        sudo ufw allow 3001/tcp    # Dev backend
        
        # Enable and check status
        sudo ufw --force enable
        sudo ufw status
        
        echo "‚úÖ Firewall configured for development"
    else
        echo "‚ö†Ô∏è UFW not installed, manual firewall configuration recommended"
    fi
}

# Installation d'outils utiles
install_utilities() {
    echo "üõ†Ô∏è Installation d'outils utiles..."
    
    local utilities=("htop" "tree" "jq" "zip" "unzip")
    
    for util in "${utilities[@]}"; do
        if ! command -v "$util" >/dev/null 2>&1; then
            echo "üì¶ Installation de $util..."
            sudo apt install -y "$util" || echo "‚ö†Ô∏è Impossible d'installer $util"
        fi
    done
    
    echo "‚úÖ Outils install√©s"
}

# Configuration des logs avec rotation
setup_logging() {
    echo "üìã Configuration des logs..."
    
    # Configuration logrotate pour les logs Docker
    sudo tee /etc/logrotate.d/yanotela > /dev/null << 'EOF'
/home/*/logs/yanotela*/*.log {
    daily
    rotate 7
    compress
    delaycompress
    missingok
    notifempty
    copytruncate
}
EOF
    
    echo "‚úÖ Configuration des logs termin√©e"
}

# V√©rification finale
final_check() {
    echo "üè• V√©rification finale..."
    
    # V√©rifier Docker
    if docker --version >/dev/null 2>&1; then
        echo "‚úÖ Docker fonctionne"
    else
        echo "‚ùå Probl√®me avec Docker"
        return 1
    fi
    
    # V√©rifier Docker Compose
    if docker-compose --version >/dev/null 2>&1; then
        echo "‚úÖ Docker Compose fonctionne"
    else
        echo "‚ùå Probl√®me avec Docker Compose"
        return 1
    fi
    
    # Check development directory
    if [[ -d ~/yanotela-dev ]]; then
        echo "‚úÖ Development directory created"
    else
        echo "‚ùå Problem with development directory"
        return 1
    fi
    
    echo "üéâ Development setup completed successfully!"
}

# Show next steps
show_next_steps() {
    echo ""
    echo "üéØ Next Steps:"
    echo "=============="
    echo "1. Configure GitHub secrets (see deploy/SETUP-DEV-SECRETS.md)"
    echo "2. Clone your repository: git clone -b Develop https://github.com/FlorianMMI/Yanotela.git ~/yanotela-dev"
    echo "3. Test local deployment: cd ~/yanotela-dev && sudo docker compose -f docker-compose.dev.yml up -d"
    echo "4. Push to Develop branch to trigger first deployment"
    echo ""
    echo "üîó Useful links:"
    echo "‚Ä¢ Documentation: ~/yanotela-dev/deploy/README.md"
    echo "‚Ä¢ Scripts: ~/yanotela-dev/deploy/scripts/"
    echo "‚Ä¢ Logs: ~/logs/yanotela-dev/"
    echo ""
    
    if groups $USER | grep -q '\bdocker\b'; then
        echo "‚úÖ Vous √™tes pr√™t √† d√©ployer!"
    else
        echo "‚ö†Ô∏è N'oubliez pas de vous d√©connecter/reconnecter pour appliquer les groupes Docker"
    fi
}

# Fonction principale
main() {
    check_requirements
    install_docker
    setup_directories
    setup_firewall
    install_utilities
    setup_logging
    final_check
    show_next_steps
}

# Help
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    echo "Usage: $0 [options]"
    echo ""
    echo "Script de configuration initiale pour EC2"
    echo ""
    echo "Options:"
    echo "  --help, -h     Afficher cette aide"
    echo "  --no-firewall  Ne pas configurer le firewall"
    echo ""
    echo "Ce script va:"
    echo "‚Ä¢ Installer Docker et Docker Compose"
    echo "‚Ä¢ Cr√©er les r√©pertoires n√©cessaires" 
    echo "‚Ä¢ Configurer le firewall (optionnel)"
    echo "‚Ä¢ Installer des outils utiles"
    echo "‚Ä¢ Configurer la rotation des logs"
    exit 0
fi

# V√©rifier les options
SETUP_FIREWALL=true
if [[ "$1" == "--no-firewall" ]]; then
    SETUP_FIREWALL=false
fi

# Ex√©cuter le setup
if [[ "$SETUP_FIREWALL" == "false" ]]; then
    echo "‚ö†Ô∏è Configuration du firewall d√©sactiv√©e"
    main() {
        check_requirements
        install_docker
        setup_directories
        install_utilities
        setup_logging
        final_check
        show_next_steps
    }
fi

main "$@"
